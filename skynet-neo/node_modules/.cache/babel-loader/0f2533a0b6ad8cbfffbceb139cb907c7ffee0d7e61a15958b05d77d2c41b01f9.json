{"ast":null,"code":"import { NodeGroup, NodeType } from '../../components/NetworkGraph/NetworkGraph';\nexport function getTypeFromNodeInfo(nodeMeta, nodeData) {\n  const isView2 = nodeData.view === 2;\n  switch (true) {\n    // case for Alert node\n    case isView2 && nodeMeta.type === \"node\" && nodeData.detection_type !== undefined:\n      return NodeType.ALERT;\n\n    // case for NameCluster node\n    case isView2 && nodeMeta.type === \"node\" && nodeData.name !== undefined && nodeData.severity !== undefined:\n      return NodeType.NAME_CLUSTER;\n\n    // case for SeverityCluster node\n    case isView2 && nodeMeta.type === \"node\" && nodeData.severity !== undefined:\n      return NodeType.SEVERITY_CLUSTER;\n    case !isView2 && nodeData.name !== undefined:\n      return NodeType.ALERT;\n    case !isView2 && nodeData.detection_type !== undefined:\n      return NodeType.NAME_CLUSTER;\n\n    // case for Entity node\n    default:\n      return NodeType.ENTITY;\n  }\n}\nexport function getGroupFromNodeInfo(nodeMeta, nodeData) {\n  const isView2 = nodeData.view === 2;\n  switch (true) {\n    // case for Alert node\n    case isView2 && nodeMeta.type === \"node\" && nodeData.detection_type !== undefined:\n      return NodeGroup.ALERT;\n\n    // case for NameCluster node\n    case isView2 && nodeData.name !== undefined && nodeData.severity !== undefined:\n      return getGroupFromSeverity(nodeData.severity);\n\n    // case for SeverityCluster node\n    case isView2 && nodeMeta.type === \"node\" && nodeData.severity !== undefined:\n      return getGroupFromSeverity(nodeData.severity);\n    case !isView2 && nodeData.name !== undefined:\n      return getGroupFromSeverity(nodeData.severity);\n    case !isView2 && nodeData.detection_type !== undefined:\n      return getGroupFromSeverity(nodeData.severity);\n\n    // case for Entity node\n    default:\n      return NodeGroup.ENTITY;\n  }\n}\nexport function getGroupFromSeverity(severity) {\n  if (!severity) {\n    return 0;\n  }\n  switch (severity.toUpperCase()) {\n    case \"HIGH\":\n      return NodeGroup.HIGH_SEVERITY;\n    case \"MEDIUM\":\n      return NodeGroup.MEDIUM_SEVERITY;\n    case \"LOW\":\n      return NodeGroup.LOW_SEVERITY;\n    default:\n      return 0;\n  }\n}\nexport function processNodesAndEdges(graphData) {\n  if (!graphData) {\n    return {\n      nodes: [],\n      links: []\n    };\n  }\n  const nodes = {};\n  const links = {};\n  for (let result of graphData.results) {\n    const {\n      meta,\n      row\n    } = result;\n    for (let i = 0; i < row.length; i++) {\n      for (let j = 0; j < row[i].length; j++) {\n        const {\n          elementId,\n          type,\n          id: index\n        } = meta[i][j];\n        switch (type) {\n          case \"node\":\n            const node = {\n              group: getGroupFromNodeInfo(meta[i][j], row[i][j]),\n              type: getTypeFromNodeInfo(meta[i][j], row[i][j]),\n              id: elementId,\n              index: meta[i][j].id,\n              ...row[i][j],\n              x: 0,\n              y: 0\n            };\n            if (!nodes[`${index}`]) {\n              nodes[`${index}`] = {\n                ...node\n              };\n            }\n            break;\n        }\n      }\n    }\n    for (let i = 0; i < meta.length; i++) {\n      for (let j = 0; j < meta[i].length; j++) {\n        const {\n          type\n        } = meta[i][j];\n        switch (type) {\n          case \"relationship\":\n            const edgeId = meta[i][j].elementId;\n            const source = `${meta[i][j - 1].id}`;\n            const target = `${meta[i][j + 1].id}`;\n            const link = {\n              source: nodes[source],\n              target: nodes[target]\n            };\n            links[edgeId] = {\n              ...link\n            };\n            break;\n        }\n      }\n    }\n  }\n  return {\n    nodes: Object.values(nodes),\n    links: Object.values(links)\n  };\n}","map":{"version":3,"names":["NodeGroup","NodeType","getTypeFromNodeInfo","nodeMeta","nodeData","isView2","view","type","detection_type","undefined","ALERT","name","severity","NAME_CLUSTER","SEVERITY_CLUSTER","ENTITY","getGroupFromNodeInfo","getGroupFromSeverity","toUpperCase","HIGH_SEVERITY","MEDIUM_SEVERITY","LOW_SEVERITY","processNodesAndEdges","graphData","nodes","links","result","results","meta","row","i","length","j","elementId","id","index","node","group","x","y","edgeId","source","target","link","Object","values"],"sources":["/Users/anirudh/Documents/Cyberdyne Ventures/skynet-web/skynet-neo/src/pages/Dashboard/graphUtils.ts"],"sourcesContent":["import { Node, Link, NodeGroup, NodeType } from '../../components/NetworkGraph/NetworkGraph';\r\nimport { NodeMeta, NodeData, PathData } from '../../common/types/backend-models.d';\r\n\r\nexport interface IGraphData {\r\n    results: PathData[];\r\n}\r\n\r\nexport type ElementID = string;\r\n\r\nexport function getTypeFromNodeInfo(nodeMeta: NodeMeta, nodeData: NodeData) {\r\n    const isView2 = nodeData.view === 2;\r\n    switch (true) {\r\n        // case for Alert node\r\n        case isView2 && nodeMeta.type === \"node\" && nodeData.detection_type !== undefined:\r\n            return NodeType.ALERT;\r\n\r\n        // case for NameCluster node\r\n        case isView2 && nodeMeta.type === \"node\" && nodeData.name !== undefined && nodeData.severity !== undefined:\r\n            return NodeType.NAME_CLUSTER;\r\n\r\n        // case for SeverityCluster node\r\n        case isView2 && nodeMeta.type === \"node\" && nodeData.severity !== undefined:\r\n            return NodeType.SEVERITY_CLUSTER;\r\n\r\n        case !isView2 && nodeData.name !== undefined:\r\n            return NodeType.ALERT;\r\n\r\n        case !isView2 && nodeData.detection_type !== undefined:\r\n            return NodeType.NAME_CLUSTER;\r\n\r\n        // case for Entity node\r\n        default:\r\n            return NodeType.ENTITY;\r\n    }\r\n}\r\n\r\nexport function getGroupFromNodeInfo(nodeMeta: NodeMeta, nodeData: NodeData) {\r\n    const isView2 = nodeData.view === 2;\r\n    switch (true) {\r\n        // case for Alert node\r\n        case isView2 && nodeMeta.type === \"node\" &&\r\n            nodeData.detection_type !== undefined:\r\n            return NodeGroup.ALERT;\r\n\r\n        // case for NameCluster node\r\n        case isView2 && nodeData.name !== undefined && nodeData.severity !== undefined:\r\n            return getGroupFromSeverity(nodeData.severity);\r\n\r\n        // case for SeverityCluster node\r\n        case isView2 && nodeMeta.type === \"node\" && nodeData.severity !== undefined:\r\n            return getGroupFromSeverity(nodeData.severity);\r\n\r\n        case !isView2 && nodeData.name !== undefined:\r\n            return getGroupFromSeverity(nodeData.severity);\r\n\r\n        case !isView2 && nodeData.detection_type !== undefined:\r\n            return getGroupFromSeverity(nodeData.severity);\r\n\r\n        // case for Entity node\r\n        default:\r\n            return NodeGroup.ENTITY;\r\n    }\r\n}\r\n\r\nexport function getGroupFromSeverity(severity?: string) {\r\n    if (!severity) {\r\n        return 0;\r\n    }\r\n    switch (severity.toUpperCase()) {\r\n        case \"HIGH\":\r\n            return NodeGroup.HIGH_SEVERITY;\r\n        case \"MEDIUM\":\r\n            return NodeGroup.MEDIUM_SEVERITY;\r\n        case \"LOW\":\r\n            return NodeGroup.LOW_SEVERITY;\r\n        default:\r\n            return 0;\r\n    }\r\n}\r\n\r\n\r\nexport function processNodesAndEdges(graphData: IGraphData | undefined) {\r\n    if (!graphData) {\r\n        return {\r\n            nodes: [],\r\n            links: [],\r\n        };\r\n    }\r\n    const nodes: Record<ElementID, Node> = {};\r\n    const links: Record<ElementID, Link> = {};\r\n\r\n    for (let result of graphData.results) {\r\n        const { meta, row } = result;\r\n        for (let i = 0; i < row.length; i++) {\r\n            for (let j = 0; j < row[i].length; j++) {\r\n                const { elementId, type, id: index } = meta[i][j];\r\n                switch (type) {\r\n                    case \"node\":\r\n                        const node = {\r\n                            group: getGroupFromNodeInfo(meta[i][j], row[i][j]),\r\n                            type: getTypeFromNodeInfo(meta[i][j], row[i][j]),\r\n                            id: elementId,\r\n                            index: meta[i][j].id,\r\n                            ...row[i][j],\r\n                            x: 0,\r\n                            y: 0,\r\n                        };\r\n                        if (!nodes[`${index}`]) {\r\n                            nodes[`${index}`] = { ...node };\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        for (let i = 0; i < meta.length; i++) {\r\n            for (let j = 0; j < meta[i].length; j++) {\r\n                const { type } = meta[i][j];\r\n                switch (type) {\r\n                    case \"relationship\":\r\n                        const edgeId = meta[i][j].elementId;\r\n                        const source = `${meta[i][j - 1].id}`;\r\n                        const target = `${meta[i][j + 1].id}`;\r\n                        const link = {\r\n                            source: nodes[source],\r\n                            target: nodes[target],\r\n                        };\r\n                        links[edgeId] = { ...link };\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    return {\r\n        nodes: Object.values(nodes),\r\n        links: Object.values(links),\r\n    };\r\n}\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}